package com.influencerManager.model;

import java.util.Date;

/**
 * Represents an Admin user in the Influencer Manager platform.
 * Admins have special privileges to manage the platform.
 * 
 * @author Influencer Manager Team
 * @version 1.0
 */
public class Admin extends User {
    private static final long serialVersionUID = 1L;
    
    private String adminLevel;
    private String department;
    private Date lastActivity;
    
    /**
     * Default constructor.
     */
    public Admin() {
        super();
        this.role = "Admin";
        this.adminLevel = "Standard";
        this.department = "General";
        this.lastActivity = new Date();
    }
    
    /**
     * Constructor with basic user information.
     * 
     * @param username The username
     * @param email The email address
     * @param password The password
     */
    public Admin(String username, String email, String password) {
        super(username, email, password);
        this.role = "Admin";
        this.adminLevel = "Standard";
        this.department = "General";
        this.lastActivity = new Date();
    }
    
    /**
     * Constructor with basic user information and admin-specific details.
     * 
     * @param username The username
     * @param email The email address
     * @param password The password
     * @param adminLevel The admin level
     * @param department The department
     */
    public Admin(String username, String email, String password, 
                String adminLevel, String department) {
        super(username, email, password);
        this.role = "Admin";
        this.adminLevel = adminLevel;
        this.department = department;
        this.lastActivity = new Date();
    }
    
    // Getters and setters
    
    public String getAdminLevel() {
        return adminLevel;
    }
    
    public void setAdminLevel(String adminLevel) {
        this.adminLevel = adminLevel;
    }
    
    public String getDepartment() {
        return department;
    }
    
    public void setDepartment(String department) {
        this.department = department;
    }
    
    public Date getLastActivity() {
        return lastActivity;
    }
    
    public void updateLastActivity() {
        this.lastActivity = new Date();
    }
    
    /**
     * Generates a system report based on specified type.
     * 
     * @param reportType The type of report to generate
     * @return The generated report as a string
     */
    public String generateSystemReport(String reportType) {
        updateLastActivity();
        
        switch (reportType.toLowerCase()) {
            case "user":
                return "User Activity Report - Generated by Admin";
            case "campaign":
                return "Campaign Performance Report - Generated by Admin";
            case "financial":
                return "Financial Report - Generated by Admin";
            default:
                return "Unknown Report Type";
        }
    }
    
    /**
     * Deactivates a user in the system.
     * 
     * @param user The user to deactivate
     * @return true if successful, false otherwise
     */
    public boolean deactivateUser(User user) {
        updateLastActivity();
        
        if (user != null) {
            user.setActive(false);
            return true;
        }
        return false;
    }
    
    /**
     * Reactivates a user in the system.
     * 
     * @param user The user to reactivate
     * @return true if successful, false otherwise
     */
    public boolean reactivateUser(User user) {
        updateLastActivity();
        
        if (user != null) {
            user.setActive(true);
            return true;
        }
        return false;
    }
    
    /**
     * Reset a user's password.
     * 
     * @param user The user whose password will be reset
     * @param newPassword The new password
     * @return true if successful, false otherwise
     */
    public boolean resetUserPassword(User user, String newPassword) {
        updateLastActivity();
        
        if (user != null && newPassword != null && !newPassword.isEmpty()) {
            user.setPassword(newPassword);
            return true;
        }
        return false;
    }
    
    /**
     * Returns a string representation of the Admin's profile.
     * 
     * @return String containing the Admin's profile information
     */
    @Override
    public String getProfileInfo() {
        return toString();
    }
    
    /**
     * Returns a string representation of the Admin object.
     * 
     * @return String representation of the Admin
     */
    @Override
    public String toString() {
        return super.toString() +
               "\nAdmin Level: " + adminLevel + 
               "\nDepartment: " + department +
               "\nLast Admin Activity: " + lastActivity;
    }
}
